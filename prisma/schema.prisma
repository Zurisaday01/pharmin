// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String    @default("NO_NAME")
    email         String    @unique(map: "user_email_idx")
    emailVerified DateTime? @db.Timestamp(6)
    image         String?
    password      String?
    role          Role      @default(MANAGER)
    address       Json?     @db.Json
    paymentMethod String?
    createdAt     DateTime  @default(now()) @db.Timestamp(6)
    updatedAt     DateTime  @updatedAt
    account       Account[]
    session       Session[]
}

enum Role {
    ADMIN
    MANAGER
}

model Account {
    userId            String  @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @id
    userId       String   @db.Uuid
    expires      DateTime @db.Timestamp(6)
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Product {
    id          String        @id @default(uuid())
    name        String
    description String?
    category    String?
    quantity    Int
    minStock    Int
    lotNumber   String?
    expiryDate  DateTime?
    status      ProductStatus @default(ACTIVE)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    removals          Removal[]
    InventoryMovement InventoryMovement[]
}

model Removal {
    id        String   @id @default(uuid())
    productId String
    reason    String
    removedBy String
    removedAt DateTime @default(now())

    product Product @relation(fields: [productId], references: [id])
}

enum ProductStatus {
    ACTIVE
    REMOVED
    EXPIRED
}

enum UserRole {
    ADMIN
    MANAGER
}

model InventoryMovement {
    id           String       @id @default(uuid())
    productId    String
    description  String // A description of the change, e.g. "Updated product name"
    movementType MovementType
    createdBy    String
    createdAt    DateTime     @default(now())

    product Product @relation(fields: [productId], references: [id])

    @@index([productId, createdAt]) // To optimize queries based on product and date
}

enum MovementType {
    ADDITION
    REMOVAL
    UPDATE
    CONSUMPTION
}
